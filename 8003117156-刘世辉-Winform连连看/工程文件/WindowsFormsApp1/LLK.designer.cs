#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_llk")]
	public partial class LLKDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Insertgames(games instance);
    partial void Updategames(games instance);
    partial void Deletegames(games instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    #endregion
		
		public LLKDataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.db_llkConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LLKDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LLKDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LLKDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LLKDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<games> games
		{
			get
			{
				return this.GetTable<games>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.games")]
	public partial class games : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _模式;
		
		private string _邮箱;
		
		private long _分数;
		
		private EntityRef<users> _users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void On模式Changing(string value);
    partial void On模式Changed();
    partial void On邮箱Changing(string value);
    partial void On邮箱Changed();
    partial void On分数Changing(long value);
    partial void On分数Changed();
    #endregion
		
		public games()
		{
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_模式", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string 模式
		{
			get
			{
				return this._模式;
			}
			set
			{
				if ((this._模式 != value))
				{
					this.On模式Changing(value);
					this.SendPropertyChanging();
					this._模式 = value;
					this.SendPropertyChanged("模式");
					this.On模式Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_邮箱", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string 邮箱
		{
			get
			{
				return this._邮箱;
			}
			set
			{
				if ((this._邮箱 != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On邮箱Changing(value);
					this.SendPropertyChanging();
					this._邮箱 = value;
					this.SendPropertyChanged("邮箱");
					this.On邮箱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_分数", DbType="BigInt NOT NULL")]
		public long 分数
		{
			get
			{
				return this._分数;
			}
			set
			{
				if ((this._分数 != value))
				{
					this.On分数Changing(value);
					this.SendPropertyChanging();
					this._分数 = value;
					this.SendPropertyChanged("分数");
					this.On分数Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_games", Storage="_users", ThisKey="邮箱", OtherKey="邮箱", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.games.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.games.Add(this);
						this._邮箱 = value.邮箱;
					}
					else
					{
						this._邮箱 = default(string);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _邮箱;
		
		private string _用户名;
		
		private long _最高分;
		
		private string _密码;
		
		private long _盘数;
		
		private EntitySet<games> _games;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On邮箱Changing(string value);
    partial void On邮箱Changed();
    partial void On用户名Changing(string value);
    partial void On用户名Changed();
    partial void On最高分Changing(long value);
    partial void On最高分Changed();
    partial void On密码Changing(string value);
    partial void On密码Changed();
    partial void On盘数Changing(long value);
    partial void On盘数Changed();
    #endregion
		
		public users()
		{
			this._games = new EntitySet<games>(new Action<games>(this.attach_games), new Action<games>(this.detach_games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_邮箱", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 邮箱
		{
			get
			{
				return this._邮箱;
			}
			set
			{
				if ((this._邮箱 != value))
				{
					this.On邮箱Changing(value);
					this.SendPropertyChanging();
					this._邮箱 = value;
					this.SendPropertyChanged("邮箱");
					this.On邮箱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用户名", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string 用户名
		{
			get
			{
				return this._用户名;
			}
			set
			{
				if ((this._用户名 != value))
				{
					this.On用户名Changing(value);
					this.SendPropertyChanging();
					this._用户名 = value;
					this.SendPropertyChanged("用户名");
					this.On用户名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_最高分", DbType="BigInt NOT NULL")]
		public long 最高分
		{
			get
			{
				return this._最高分;
			}
			set
			{
				if ((this._最高分 != value))
				{
					this.On最高分Changing(value);
					this.SendPropertyChanging();
					this._最高分 = value;
					this.SendPropertyChanged("最高分");
					this.On最高分Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_密码", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string 密码
		{
			get
			{
				return this._密码;
			}
			set
			{
				if ((this._密码 != value))
				{
					this.On密码Changing(value);
					this.SendPropertyChanging();
					this._密码 = value;
					this.SendPropertyChanged("密码");
					this.On密码Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_盘数", DbType="BigInt NOT NULL")]
		public long 盘数
		{
			get
			{
				return this._盘数;
			}
			set
			{
				if ((this._盘数 != value))
				{
					this.On盘数Changing(value);
					this.SendPropertyChanging();
					this._盘数 = value;
					this.SendPropertyChanged("盘数");
					this.On盘数Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_games", Storage="_games", ThisKey="邮箱", OtherKey="邮箱")]
		public EntitySet<games> games
		{
			get
			{
				return this._games;
			}
			set
			{
				this._games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_games(games entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_games(games entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
}
#pragma warning restore 1591
